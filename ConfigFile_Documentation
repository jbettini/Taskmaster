
##Legende :
## •        Description du sujet
## -----    Description doc supervisor

CMD :
• The command to use to launch the program
-----

The command that will be run when this program is started. 
The command can be either absolute (e.g. /path/to/programname) or relative (e.g. programname). 
If it is relative, the supervisord’s environment $PATH will be searched for the executable. 
Programs can accept arguments, e.g. /path/to/program foo bar. 
The command line can use double quotes to group arguments with spaces in them to pass to the program, 
e.g. /path/to/program/name -p "foo bar". Note that the value of command may include Python string expressions, 
e.g. /path/to/programname --port=80%(process_num)02d might expand to /path/to/programname --port=8000 at runtime. 
String expressions are evaluated against a dictionary containing the keys group_name, host_node_name, program_name, 
process_num, numprocs, here (the directory of the supervisord config file), 
and all supervisord’s environment variables prefixed with ENV_. Controlled programs should themselves not be daemons, 
as supervisord assumes it is responsible for daemonizing its subprocesses (see Nondaemonizing of Subprocesses).

*Note*

The command will be truncated if it looks like a config file comment, 
e.g. command=bash -c 'foo ; bar' will be truncated to command=bash -c 'foo. 
Quoting will not prevent this behavior, 
since the configuration file reader does not parse the command like a shell would.

Default: No default.

Required: Yes.

########################################################################

NUMPROCS :
• The number of processes to start and keep RUNNING 
-----
Supervisor will start as many instances of this program as named by numprocs. 
Note that if numprocs > 1, the process_name expression must include %(process_num)s 
(or any other valid Python string expression that includes process_num) within it.

Default: 1
Required: No.

########################################################################

UMASK :
• An umask to set before launching the program
-----
The umask of the supervisord process.

Default: 022
Required: No.

########################################################################

WORKINGDIR :
• A working directory to set before launching the program
-----
A file path representing a directory to which supervisord should 
temporarily chdir before exec’ing the child.

Default: No chdir (inherit supervisor’s)
Required: No.

########################################################################

AUTOSTART :
• Whether to start this program at launch or not
-----
If true, this program will start automatically when supervisord is started.

Default: true
Required: No.

########################################################################

AUTORESTART :
• Whether the program should be restarted always, never, or on unexpected exits
only
-----
Specifies if supervisord should automatically restart a process if it exits when it is in the RUNNING state. 
May be one of false, unexpected, or true. If false, the process will not be autorestarted. If unexpected, 
the process will be restarted when the program exits with an exit code that is 
not one of the exit codes associated with this process’ configuration (see exitcodes). 
If true, the process will be unconditionally restarted when it exits, without regard to its exit code.

*Note*
autorestart controls whether supervisord will autorestart a program if it exits 
after it has successfully started up (the process is in the RUNNING state).
supervisord has a different restart mechanism for when the process is starting up 
(the process is in the STARTING state). Retries during process 
startup are controlled by startsecs and startretries.

Default: unexpected
Required: No.

########################################################################

EXITCODES :
• Which return codes represent an "expected" exit status
-----

The list of “expected” exit codes for this program used with autorestart. 
If the autorestart parameter is set to unexpected, 
and the process exits in any other way than as a result of a supervisor stop request, 
supervisord will restart the process if it exits with an exit code that is not defined in this list.

Default: 0
Required: No.

########################################################################

STARTRETRIES :
• How many times a restart should be attempted before aborting
-----

The number of serial failure attempts that supervisord will allow when attempting to start the program before 
giving up and putting the process into an FATAL state.

*Note*
After each failed restart, process will be put in BACKOFF 
state and each retry attempt will take increasingly more time.
See Process States for explanation of the FATAL and BACKOFF states.

Default: 3
Required: No.

########################################################################

STARTTIME :
• How long the program should be RUNNING after it’s started for it to be considered
"successfully started"
-----

The total number of seconds which the program needs to stay RUNNING after a startup to consider the start successful 
(moving the process from the STARTING state to the RUNNING state). 
Set to 0 to indicate that the program needn’t stay RUNNING for any particular amount of time.

*Note*
Even if a process exits with an “expected” exit code (see exitcodes), 
the start will still be considered a failure if the process exits quicker than startsecs.

Default: 1
Required: No.

########################################################################

STOPSIGNAL :
• Which signal should be used to stop (i.e. exit gracefully) the program
-----

The signal used to kill the program when a stop is requested. 
This can be specified using the signal’s name or its number. 
It is normally one of: TERM, HUP, INT, QUIT, KILL, USR1, or USR2.

Default: TERM
Required: No.

########################################################################

STOPTIME :
• How long to wait after a graceful stop before killing the program
-----

The number of seconds to wait for the OS to return a SIGCHLD to 
supervisord after the program has been sent a stopsignal. 
If this number of seconds elapses before supervisord receives a 
SIGCHLD from the process, supervisord will attempt to kill it with a final SIGKILL.

Default: 10
Required: No.

########################################################################

STDOUT/STDERR :
• Options to discard the program’s stdout/stderr or to redirect them to files
-----
***Custom rules***
set to None or a path to a files, err and out cannot use the same file

Default: no values
Required: No.

##################################################################

ENV :
• Environment variables to set before launching the program-----

A list of key/value pairs in the form KEY="val",KEY2="val2" 
that will be placed in the environment of all child processes. 
This does not change the environment of supervisord itself. 
This option can include the value %(here)s, 
which expands to the directory in which the supervisord configuration file was found. 
Values containing non-alphanumeric characters should be quoted (e.g. KEY="val:123",KEY2="val,456"). 
Otherwise, quoting the values is optional but recommended. To escape percent characters, 
simply use two. (e.g. URI="/first%%20name") 
Note that subprocesses will inherit the environment variables of the shell used to start supervisord except for the ones overridden here and within the program’s environment option. 
See Subprocess Environment.

Default: no values
Required: No.





Champs Option -> string: 
Ne necessitant pas de valeur par default :

    stdout
    stderr
    env

Le contraire :

    umask           3 chiffre entre 0 et 7
    autorestart     true/false/unexpected
    stopsignal      Un des signaux existant
--------
Champs Number :

    numprocs: Option<usize>,    un chiffre entre 1 et inf~
    startretries: Option<u32>,  //
    stoptime: Option<u32>,      //
    starttime: Option<u32>,     entre 0 et inf

--------

Champs Speciaux :

    pub exitcodes: Option<Vec<i32>>,
    pub autostart: Option<bool>,        
